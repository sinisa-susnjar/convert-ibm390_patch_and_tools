*** IBM390lib.ccc.orig	2017-05-25 01:46:53.845229425 +0100
--- IBM390lib.ccc	2017-05-25 01:51:40.615730468 +0100
***************
*** 1,6 ****
--- 1,12 ----
+ #define USE_OPTS 1
+ 
  #include <stdio.h>
  #include <stdlib.h>
  #include <time.h>
+ #if USE_OPTS
+ #include <limits.h>
+ #include <string.h>
+ #endif /* USE_OPTS */
  #include "IBM390lib.h"
  /*-------------------------------------------------------------------
    Module:  Convert::IBM390
*************** static const double pows_of_10[32] = { 1
*** 15,20 ****
--- 21,50 ----
    1.0E16, 1.0E17, 1.0E18, 1.0E19, 1.0E20, 1.0E21, 1.0E22, 1.0E23,
    1.0E24, 1.0E25, 1.0E26, 1.0E27, 1.0E28, 1.0E29, 1.0E30, 1.0E31 };
  
+ #if USE_OPTS
+ struct {
+ 	char zonepart;
+ 	char numpart;
+ 	char val;
+ } packed_digits[256] = {
+ {0x00,0x00,0x00},{0x00,0x01,0x01},{0x00,0x02,0x02},{0x00,0x03,0x03},{0x00,0x04,0x04},{0x00,0x05,0x05},{0x00,0x06,0x06},{0x00,0x07,0x07},{0x00,0x08,0x08},{0x00,0x09,0x09},{0x00,0x0a,0xff},{0x00,0x0b,0xff},{0x00,0x0c,0xff},{0x00,0x0d,0xff},{0x00,0x0e,0xff},{0x00,0x0f,0xff},
+ {0x01,0x00,0x0a},{0x01,0x01,0x0b},{0x01,0x02,0x0c},{0x01,0x03,0x0d},{0x01,0x04,0x0e},{0x01,0x05,0x0f},{0x01,0x06,0x10},{0x01,0x07,0x11},{0x01,0x08,0x12},{0x01,0x09,0x13},{0x01,0x0a,0xff},{0x01,0x0b,0xff},{0x01,0x0c,0xff},{0x01,0x0d,0xff},{0x01,0x0e,0xff},{0x01,0x0f,0xff},
+ {0x02,0x00,0x14},{0x02,0x01,0x15},{0x02,0x02,0x16},{0x02,0x03,0x17},{0x02,0x04,0x18},{0x02,0x05,0x19},{0x02,0x06,0x1a},{0x02,0x07,0x1b},{0x02,0x08,0x1c},{0x02,0x09,0x1d},{0x02,0x0a,0xff},{0x02,0x0b,0xff},{0x02,0x0c,0xff},{0x02,0x0d,0xff},{0x02,0x0e,0xff},{0x02,0x0f,0xff},
+ {0x03,0x00,0x1e},{0x03,0x01,0x1f},{0x03,0x02,0x20},{0x03,0x03,0x21},{0x03,0x04,0x22},{0x03,0x05,0x23},{0x03,0x06,0x24},{0x03,0x07,0x25},{0x03,0x08,0x26},{0x03,0x09,0x27},{0x03,0x0a,0xff},{0x03,0x0b,0xff},{0x03,0x0c,0xff},{0x03,0x0d,0xff},{0x03,0x0e,0xff},{0x03,0x0f,0xff},
+ {0x04,0x00,0x28},{0x04,0x01,0x29},{0x04,0x02,0x2a},{0x04,0x03,0x2b},{0x04,0x04,0x2c},{0x04,0x05,0x2d},{0x04,0x06,0x2e},{0x04,0x07,0x2f},{0x04,0x08,0x30},{0x04,0x09,0x31},{0x04,0x0a,0xff},{0x04,0x0b,0xff},{0x04,0x0c,0xff},{0x04,0x0d,0xff},{0x04,0x0e,0xff},{0x04,0x0f,0xff},
+ {0x05,0x00,0x32},{0x05,0x01,0x33},{0x05,0x02,0x34},{0x05,0x03,0x35},{0x05,0x04,0x36},{0x05,0x05,0x37},{0x05,0x06,0x38},{0x05,0x07,0x39},{0x05,0x08,0x3a},{0x05,0x09,0x3b},{0x05,0x0a,0xff},{0x05,0x0b,0xff},{0x05,0x0c,0xff},{0x05,0x0d,0xff},{0x05,0x0e,0xff},{0x05,0x0f,0xff},
+ {0x06,0x00,0x3c},{0x06,0x01,0x3d},{0x06,0x02,0x3e},{0x06,0x03,0x3f},{0x06,0x04,0x40},{0x06,0x05,0x41},{0x06,0x06,0x42},{0x06,0x07,0x43},{0x06,0x08,0x44},{0x06,0x09,0x45},{0x06,0x0a,0xff},{0x06,0x0b,0xff},{0x06,0x0c,0xff},{0x06,0x0d,0xff},{0x06,0x0e,0xff},{0x06,0x0f,0xff},
+ {0x07,0x00,0x46},{0x07,0x01,0x47},{0x07,0x02,0x48},{0x07,0x03,0x49},{0x07,0x04,0x4a},{0x07,0x05,0x4b},{0x07,0x06,0x4c},{0x07,0x07,0x4d},{0x07,0x08,0x4e},{0x07,0x09,0x4f},{0x07,0x0a,0xff},{0x07,0x0b,0xff},{0x07,0x0c,0xff},{0x07,0x0d,0xff},{0x07,0x0e,0xff},{0x07,0x0f,0xff},
+ {0x08,0x00,0x50},{0x08,0x01,0x51},{0x08,0x02,0x52},{0x08,0x03,0x53},{0x08,0x04,0x54},{0x08,0x05,0x55},{0x08,0x06,0x56},{0x08,0x07,0x57},{0x08,0x08,0x58},{0x08,0x09,0x59},{0x08,0x0a,0xff},{0x08,0x0b,0xff},{0x08,0x0c,0xff},{0x08,0x0d,0xff},{0x08,0x0e,0xff},{0x08,0x0f,0xff},
+ {0x09,0x00,0x5a},{0x09,0x01,0x5b},{0x09,0x02,0x5c},{0x09,0x03,0x5d},{0x09,0x04,0x5e},{0x09,0x05,0x5f},{0x09,0x06,0x60},{0x09,0x07,0x61},{0x09,0x08,0x62},{0x09,0x09,0x63},{0x09,0x0a,0xff},{0x09,0x0b,0xff},{0x09,0x0c,0xff},{0x09,0x0d,0xff},{0x09,0x0e,0xff},{0x09,0x0f,0xff},
+ {0x0a,0x00,0xff},{0x0a,0x01,0xff},{0x0a,0x02,0xff},{0x0a,0x03,0xff},{0x0a,0x04,0xff},{0x0a,0x05,0xff},{0x0a,0x06,0xff},{0x0a,0x07,0xff},{0x0a,0x08,0xff},{0x0a,0x09,0xff},{0x0a,0x0a,0xff},{0x0a,0x0b,0xff},{0x0a,0x0c,0xff},{0x0a,0x0d,0xff},{0x0a,0x0e,0xff},{0x0a,0x0f,0xff},
+ {0x0b,0x00,0xff},{0x0b,0x01,0xff},{0x0b,0x02,0xff},{0x0b,0x03,0xff},{0x0b,0x04,0xff},{0x0b,0x05,0xff},{0x0b,0x06,0xff},{0x0b,0x07,0xff},{0x0b,0x08,0xff},{0x0b,0x09,0xff},{0x0b,0x0a,0xff},{0x0b,0x0b,0xff},{0x0b,0x0c,0xff},{0x0b,0x0d,0xff},{0x0b,0x0e,0xff},{0x0b,0x0f,0xff},
+ {0x0c,0x00,0xff},{0x0c,0x01,0xff},{0x0c,0x02,0xff},{0x0c,0x03,0xff},{0x0c,0x04,0xff},{0x0c,0x05,0xff},{0x0c,0x06,0xff},{0x0c,0x07,0xff},{0x0c,0x08,0xff},{0x0c,0x09,0xff},{0x0c,0x0a,0xff},{0x0c,0x0b,0xff},{0x0c,0x0c,0xff},{0x0c,0x0d,0xff},{0x0c,0x0e,0xff},{0x0c,0x0f,0xff},
+ {0x0d,0x00,0xff},{0x0d,0x01,0xff},{0x0d,0x02,0xff},{0x0d,0x03,0xff},{0x0d,0x04,0xff},{0x0d,0x05,0xff},{0x0d,0x06,0xff},{0x0d,0x07,0xff},{0x0d,0x08,0xff},{0x0d,0x09,0xff},{0x0d,0x0a,0xff},{0x0d,0x0b,0xff},{0x0d,0x0c,0xff},{0x0d,0x0d,0xff},{0x0d,0x0e,0xff},{0x0d,0x0f,0xff},
+ {0x0e,0x00,0xff},{0x0e,0x01,0xff},{0x0e,0x02,0xff},{0x0e,0x03,0xff},{0x0e,0x04,0xff},{0x0e,0x05,0xff},{0x0e,0x06,0xff},{0x0e,0x07,0xff},{0x0e,0x08,0xff},{0x0e,0x09,0xff},{0x0e,0x0a,0xff},{0x0e,0x0b,0xff},{0x0e,0x0c,0xff},{0x0e,0x0d,0xff},{0x0e,0x0e,0xff},{0x0e,0x0f,0xff},
+ {0x0f,0x00,0xff},{0x0f,0x01,0xff},{0x0f,0x02,0xff},{0x0f,0x03,0xff},{0x0f,0x04,0xff},{0x0f,0x05,0xff},{0x0f,0x06,0xff},{0x0f,0x07,0xff},{0x0f,0x08,0xff},{0x0f,0x09,0xff},{0x0f,0x0a,0xff},{0x0f,0x0b,0xff},{0x0f,0x0c,0xff},{0x0f,0x0d,0xff},{0x0f,0x0e,0xff},{0x0f,0x0f,0xff}
+ };
+ #endif /* USE_OPTS */
  
  /*---------- Packed decimal to Perl number ----------*/
  double  CF_packed2num
*************** double  CF_packed2num
*** 25,50 ****
   double  out_num;
   short   i;
   unsigned char  pdigits, zonepart, numpart, signum;
  
  #ifdef DEBUG390
    fprintf(stderr, "*D* CF_packed2num: beginning\n");
  #endif
   out_num = 0.0;
!  for (i = 0; i < plength; i++) {
!     pdigits = (unsigned char) *(packed + i);
!     zonepart = pdigits >> 4;
!     numpart = pdigits & 0x0F;
!     if (i < plength - 1) {
!        if ((zonepart > 0x09) || (numpart > 0x09))
            { return INVALID_390NUM; }
!        out_num = (out_num * 100) + (zonepart * 10) + numpart;
!     } else {
!        if ((zonepart > 0x09) || (numpart < 0x0A))
            { return INVALID_390NUM; }
!        out_num = (out_num * 10) + zonepart;
!        signum = numpart;
!     }
   }
   if (signum == 0x0D || signum == 0x0B) {
      out_num = -out_num;
   }
--- 55,105 ----
   double  out_num;
   short   i;
   unsigned char  pdigits, zonepart, numpart, signum;
+ #if USE_OPTS
+  unsigned char val;
+  unsigned long out_long;
+  out_long = 0;
+ #endif /* USE_OPTS */
  
  #ifdef DEBUG390
    fprintf(stderr, "*D* CF_packed2num: beginning\n");
  #endif
   out_num = 0.0;
! #if USE_OPTS
!  if (plength <= 9) {
!    for (i = 0; i < plength-1; i++) {
!       if ((val = packed_digits[(unsigned char) *(packed + i)].val) == 255)
            { return INVALID_390NUM; }
!       out_long = (out_long * 100) + val;
!    }
!    if (i < plength) {
!       pdigits = (unsigned char) *(packed + i);
!        if (packed_digits[pdigits].val == 255)
            { return INVALID_390NUM; }
!        out_long = (out_long * 10) + packed_digits[pdigits].zonepart;
!        signum = packed_digits[pdigits].numpart;
!    }
!    out_num = out_long;
!  } else {
! #endif /* USE_OPTS */
!    for (i=0; i < plength; i++) {
!       pdigits = (unsigned char) *(packed + i);
!       zonepart = pdigits >> 4;
!       numpart = pdigits & 0x0F;
!       if (i < plength - 1) {
!          if ((zonepart > 0x09) || (numpart > 0x09))
!             { return INVALID_390NUM; }
!          out_num = (out_num * 100) + (zonepart * 10) + numpart;
!       } else {
!          if ((zonepart > 0x09) || (numpart < 0x0A))
!             { return INVALID_390NUM; }
!          out_num = (out_num * 10) + zonepart;
!          signum = numpart;
!       }
!    }
! #if USE_OPTS
   }
+ #endif /* USE_OPTS */
   if (signum == 0x0D || signum == 0x0B) {
      out_num = -out_num;
   }
*************** double  CF_packed2num
*** 61,66 ****
--- 116,136 ----
   return out_num;
  }
  
+ #if USE_OPTS
+ void
+ fmt_num(char *buf, int sz, int len, unsigned long long val)
+ {
+ 	char *ptr = buf + len;
+ 	unsigned long long x;
+ 	*ptr-- = 0x00;
+ 	while (val > 0) {
+ 		x = val / 10;
+ 		*ptr-- = val - x * 10 + 0x30;
+ 		val = x;
+ 	}
+ 	memset(buf, 0x30, ptr-buf+1);
+ }
+ #endif /* USE_OPTS */
  
  /*---------- Perl number to packed decimal ----------*/
  int  CF_num2packed
*************** int  CF_num2packed
*** 93,99 ****
   }
  
     /* sprintf will round to an "integral" value. */
!  sprintf(digits, "%031.0f", perl_absval);
   outdigits = outbytes * 2 - 1;
   digit_ptr = digits;
   out_ptr = packed_ptr;
--- 163,174 ----
   }
  
     /* sprintf will round to an "integral" value. */
! #if USE_OPTS
!  if (perl_absval < ULLONG_MAX)
!  	fmt_num(digits, sizeof(digits), 31, perl_absval+.5);
!  else
! #endif /* USE_OPTS */
!  	sprintf(digits, "%031.0f", perl_absval);
   outdigits = outbytes * 2 - 1;
   digit_ptr = digits;
   out_ptr = packed_ptr;
*************** int  CF_num2zoned
*** 189,195 ****
   }
  
     /* sprintf will round to an "integral" value. */
!  sprintf(digits, "%031.0f", perl_absval);
   digit_ptr = digits;
   out_ptr = zoned_ptr;
   for (i = 31 - outbytes; i < 31; i++) {
--- 264,275 ----
   }
  
     /* sprintf will round to an "integral" value. */
! #if USE_OPTS
!  if (perl_absval < ULLONG_MAX)
!  	fmt_num(digits, sizeof(digits), 31, perl_absval+.5);
!  else
! #endif /* USE_OPTS */
!  	sprintf(digits, "%031.0f", perl_absval);
   digit_ptr = digits;
   out_ptr = zoned_ptr;
   for (i = 31 - outbytes; i < 31; i++) {
